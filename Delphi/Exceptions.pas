(**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *)

unit Exceptions;

interface

uses
  Classes,
  SysUtils,
  Generics.Collections,
  Thrift,
  Thrift.Utils,
  Thrift.Collections,
  Thrift.Protocol,
  Thrift.Transport;

const
  cExceptions_Option_AnsiStr_Binary = False;
type
  TProfileException = class(TException)
  public
    type
      IProfileExceptionFactory = interface(IBase)
        function GetErrorCode: Integer;
        procedure SetErrorCode( const Value: Integer);
        function GetDescription: string;
        procedure SetDescription( const Value: string);

        // Create Exception Object
        function CreateException: TProfileException;

        property ErrorCode: Integer read GetErrorCode write SetErrorCode;
        property Description: string read GetDescription write SetDescription;

        function Get__isset_ErrorCode: Boolean;
        function Get__isset_Description: Boolean;

        property __isset_ErrorCode: Boolean read Get__isset_ErrorCode;
        property __isset_Description: Boolean read Get__isset_Description;
      end;

      TProfileExceptionFactoryImpl = class(TInterfacedObject, IBase, IProfileExceptionFactory)
      private
        FErrorCode: Integer;
        FDescription: string;
        
        F__isset_ErrorCode: Boolean;
        F__isset_Description: Boolean;
        
        function GetErrorCode: Integer;
        procedure SetErrorCode( const Value: Integer);
        function GetDescription: string;
        procedure SetDescription( const Value: string);

        function Get__isset_ErrorCode: Boolean;
        function Get__isset_Description: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; override;

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Create Exception Object
        function CreateException: TProfileException;

        // Properties
        property ErrorCode: Integer read GetErrorCode write SetErrorCode;
        property Description: string read GetDescription write SetDescription;

        // isset
        property __isset_ErrorCode: Boolean read Get__isset_ErrorCode;
        property __isset_Description: Boolean read Get__isset_Description;
      end;

  private
    FProfileExceptionFactory :IProfileExceptionFactory;

    FErrorCode: Integer;
    FDescription: string;
    
    F__isset_ErrorCode: Boolean;
    F__isset_Description: Boolean;
    
    function GetErrorCode: Integer;
    procedure SetErrorCode( const Value: Integer);
    function GetDescription: string;
    procedure SetDescription( const Value: string);

    function Get__isset_ErrorCode: Boolean;
    function Get__isset_Description: Boolean;
  public
    constructor Create; overload;
    constructor Create( AErrorCode: Integer; const ADescription: string); overload;
    destructor Destroy; override;

    function ToString: string; override;

    // Exception Factory
    property ProfileExceptionFactory: IProfileExceptionFactory read FProfileExceptionFactory write FProfileExceptionFactory;

    // Properties
    property ErrorCode: Integer read GetErrorCode write SetErrorCode;
    property Description: string read GetDescription write SetDescription;

    // isset
    property __isset_ErrorCode: Boolean read Get__isset_ErrorCode;
    property __isset_Description: Boolean read Get__isset_Description;
  end;

implementation

constructor TProfileException.TProfileExceptionFactoryImpl.Create;
begin
  inherited;
end;

destructor TProfileException.TProfileExceptionFactoryImpl.Destroy;
begin
  inherited;
end;

function TProfileException.TProfileExceptionFactoryImpl.GetErrorCode: Integer;
begin
  Result := FErrorCode;
end;

procedure TProfileException.TProfileExceptionFactoryImpl.SetErrorCode( const Value: Integer);
begin
  F__isset_ErrorCode := True;
  FErrorCode := Value;
end;

function TProfileException.TProfileExceptionFactoryImpl.Get__isset_ErrorCode: Boolean;
begin
  Result := F__isset_ErrorCode;
end;

function TProfileException.TProfileExceptionFactoryImpl.GetDescription: string;
begin
  Result := FDescription;
end;

procedure TProfileException.TProfileExceptionFactoryImpl.SetDescription( const Value: string);
begin
  F__isset_Description := True;
  FDescription := Value;
end;

function TProfileException.TProfileExceptionFactoryImpl.Get__isset_Description: Boolean;
begin
  Result := F__isset_Description;
end;

procedure TProfileException.TProfileExceptionFactoryImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;

begin
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.I32) then
          begin
            ErrorCode := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.String_) then
          begin
            Description := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TProfileException.TProfileExceptionFactoryImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
begin
  struc := TStructImpl.Create('ProfileException');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_ErrorCode) then
  begin
    field_.Name := 'errorCode';
    field_.Type_  := TType.I32;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(ErrorCode);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Description) then
  begin
    field_.Name := 'description';
    field_.Type_  := TType.String_;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Description);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TProfileException.TProfileExceptionFactoryImpl.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append('ErrorCode: ');
    sb.Append(ErrorCode);
    sb.Append(',Description: ');
    sb.Append(Description);
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

function TProfileException.TProfileExceptionFactoryImpl.CreateException: TProfileException;
begin
  Result := TProfileException.Create;
  Result.ProfileExceptionFactory := Self;
  if __isset_ErrorCode then
  begin
    Result.ErrorCode := ErrorCode;
  end;
  if __isset_Description then
  begin
    Result.Description := Description;
  end;
  Result.UpdateMessageProperty;
end;

constructor TProfileException.Create;
begin
  inherited Create('');
  FProfileExceptionFactory := TProfileExceptionFactoryImpl.Create;
end;

constructor TProfileException.Create( AErrorCode: Integer; const ADescription: string);
begin
  Create;
  ErrorCode := AErrorCode;
  Description := ADescription;
  UpdateMessageProperty;
end;

destructor TProfileException.Destroy;
begin
  inherited;
end;

function TProfileException.GetErrorCode: Integer;
begin
  Result := FErrorCode;
end;

procedure TProfileException.SetErrorCode( const Value: Integer);
begin
  F__isset_ErrorCode := True;
  FErrorCode := Value;
  FProfileExceptionFactory.ErrorCode := Value;
end;

function TProfileException.Get__isset_ErrorCode: Boolean;
begin
  Result := F__isset_ErrorCode;
end;

function TProfileException.GetDescription: string;
begin
  Result := FDescription;
end;

procedure TProfileException.SetDescription( const Value: string);
begin
  F__isset_Description := True;
  FDescription := Value;
  FProfileExceptionFactory.Description := Value;
end;

function TProfileException.Get__isset_Description: Boolean;
begin
  Result := F__isset_Description;
end;

function TProfileException.ToString: string;
var
  sb : TThriftStringBuilder;
begin
  sb := TThriftStringBuilder.Create('(');
  try
    sb.Append('ErrorCode: ');
    sb.Append(ErrorCode);
    sb.Append(',Description: ');
    sb.Append(Description);
    sb.Append(')');
    Result := sb.ToString;
  finally
    sb.Free;
  end;
end;

end.
